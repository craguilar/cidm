// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/craguilar/cidm/restapi/operations/login"
	"github.com/craguilar/cidm/restapi/operations/resource"
	"github.com/craguilar/cidm/restapi/operations/token"
)

// NewCidmAPI creates a new Cidm instance
func NewCidmAPI(spec *loads.Document) *CidmAPI {
	return &CidmAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		LoginAddLoginDetailsHandler: login.AddLoginDetailsHandlerFunc(func(params login.AddLoginDetailsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LoginAddLoginDetails has not yet been implemented")
		}),
		ResourceAddResourceHandler: resource.AddResourceHandlerFunc(func(params resource.AddResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ResourceAddResource has not yet been implemented")
		}),
		TokenAddUserPermissionHandler: token.AddUserPermissionHandlerFunc(func(params token.AddUserPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenAddUserPermission has not yet been implemented")
		}),
		ResourceDeleteResourceHandler: resource.DeleteResourceHandlerFunc(func(params resource.DeleteResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ResourceDeleteResource has not yet been implemented")
		}),
		TokenDeleteUserPermissionHandler: token.DeleteUserPermissionHandlerFunc(func(params token.DeleteUserPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenDeleteUserPermission has not yet been implemented")
		}),
		LoginGetLoginHandler: login.GetLoginHandlerFunc(func(params login.GetLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLogin has not yet been implemented")
		}),
		LoginGetLoginCallbackHandler: login.GetLoginCallbackHandlerFunc(func(params login.GetLoginCallbackParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLoginCallback has not yet been implemented")
		}),
		LoginGetLoginConfigDetailsHandler: login.GetLoginConfigDetailsHandlerFunc(func(params login.GetLoginConfigDetailsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLoginConfigDetails has not yet been implemented")
		}),
		LoginGetLoginDetailsHandler: login.GetLoginDetailsHandlerFunc(func(params login.GetLoginDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLoginDetails has not yet been implemented")
		}),
		LoginGetLoginDetailsByIDHandler: login.GetLoginDetailsByIDHandlerFunc(func(params login.GetLoginDetailsByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLoginDetailsByID has not yet been implemented")
		}),
		LoginGetLoginMockHandler: login.GetLoginMockHandlerFunc(func(params login.GetLoginMockParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginGetLoginMock has not yet been implemented")
		}),
		ResourceGetResourceByIDHandler: resource.GetResourceByIDHandlerFunc(func(params resource.GetResourceByIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ResourceGetResourceByID has not yet been implemented")
		}),
		TokenGetUserPermissionHandler: token.GetUserPermissionHandlerFunc(func(params token.GetUserPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenGetUserPermission has not yet been implemented")
		}),
		TokenTokenValidatPayloadHandler: token.TokenValidatPayloadHandlerFunc(func(params token.TokenValidatPayloadParams) middleware.Responder {
			return middleware.NotImplemented("operation TokenTokenValidatPayload has not yet been implemented")
		}),
		TokenTokenValidateHandler: token.TokenValidateHandlerFunc(func(params token.TokenValidateParams) middleware.Responder {
			return middleware.NotImplemented("operation TokenTokenValidate has not yet been implemented")
		}),
		LoginUpdateLoginConfigDetailsHandler: login.UpdateLoginConfigDetailsHandlerFunc(func(params login.UpdateLoginConfigDetailsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LoginUpdateLoginConfigDetails has not yet been implemented")
		}),
		LoginUpdateLoginDetailsHandler: login.UpdateLoginDetailsHandlerFunc(func(params login.UpdateLoginDetailsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LoginUpdateLoginDetails has not yet been implemented")
		}),
		ResourceUpdateResourceHandler: resource.UpdateResourceHandlerFunc(func(params resource.UpdateResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ResourceUpdateResource has not yet been implemented")
		}),
		TokenUpdateUserPermissionHandler: token.UpdateUserPermissionHandlerFunc(func(params token.UpdateUserPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenUpdateUserPermission has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (bearer) Authorization from header param [Authorization] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*CidmAPI This is the base API for Identity Manager microservice. Api documentation
available in /api/idm/docs
*/
type CidmAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// LoginAddLoginDetailsHandler sets the operation handler for the add login details operation
	LoginAddLoginDetailsHandler login.AddLoginDetailsHandler
	// ResourceAddResourceHandler sets the operation handler for the add resource operation
	ResourceAddResourceHandler resource.AddResourceHandler
	// TokenAddUserPermissionHandler sets the operation handler for the add user permission operation
	TokenAddUserPermissionHandler token.AddUserPermissionHandler
	// ResourceDeleteResourceHandler sets the operation handler for the delete resource operation
	ResourceDeleteResourceHandler resource.DeleteResourceHandler
	// TokenDeleteUserPermissionHandler sets the operation handler for the delete user permission operation
	TokenDeleteUserPermissionHandler token.DeleteUserPermissionHandler
	// LoginGetLoginHandler sets the operation handler for the get login operation
	LoginGetLoginHandler login.GetLoginHandler
	// LoginGetLoginCallbackHandler sets the operation handler for the get login callback operation
	LoginGetLoginCallbackHandler login.GetLoginCallbackHandler
	// LoginGetLoginConfigDetailsHandler sets the operation handler for the get login config details operation
	LoginGetLoginConfigDetailsHandler login.GetLoginConfigDetailsHandler
	// LoginGetLoginDetailsHandler sets the operation handler for the get login details operation
	LoginGetLoginDetailsHandler login.GetLoginDetailsHandler
	// LoginGetLoginDetailsByIDHandler sets the operation handler for the get login details by Id operation
	LoginGetLoginDetailsByIDHandler login.GetLoginDetailsByIDHandler
	// LoginGetLoginMockHandler sets the operation handler for the get login mock operation
	LoginGetLoginMockHandler login.GetLoginMockHandler
	// ResourceGetResourceByIDHandler sets the operation handler for the get resource by Id operation
	ResourceGetResourceByIDHandler resource.GetResourceByIDHandler
	// TokenGetUserPermissionHandler sets the operation handler for the get user permission operation
	TokenGetUserPermissionHandler token.GetUserPermissionHandler
	// TokenTokenValidatPayloadHandler sets the operation handler for the token validat payload operation
	TokenTokenValidatPayloadHandler token.TokenValidatPayloadHandler
	// TokenTokenValidateHandler sets the operation handler for the token validate operation
	TokenTokenValidateHandler token.TokenValidateHandler
	// LoginUpdateLoginConfigDetailsHandler sets the operation handler for the update login config details operation
	LoginUpdateLoginConfigDetailsHandler login.UpdateLoginConfigDetailsHandler
	// LoginUpdateLoginDetailsHandler sets the operation handler for the update login details operation
	LoginUpdateLoginDetailsHandler login.UpdateLoginDetailsHandler
	// ResourceUpdateResourceHandler sets the operation handler for the update resource operation
	ResourceUpdateResourceHandler resource.UpdateResourceHandler
	// TokenUpdateUserPermissionHandler sets the operation handler for the update user permission operation
	TokenUpdateUserPermissionHandler token.UpdateUserPermissionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *CidmAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CidmAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CidmAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CidmAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CidmAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CidmAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CidmAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CidmAPI
func (o *CidmAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.LoginAddLoginDetailsHandler == nil {
		unregistered = append(unregistered, "login.AddLoginDetailsHandler")
	}

	if o.ResourceAddResourceHandler == nil {
		unregistered = append(unregistered, "resource.AddResourceHandler")
	}

	if o.TokenAddUserPermissionHandler == nil {
		unregistered = append(unregistered, "token.AddUserPermissionHandler")
	}

	if o.ResourceDeleteResourceHandler == nil {
		unregistered = append(unregistered, "resource.DeleteResourceHandler")
	}

	if o.TokenDeleteUserPermissionHandler == nil {
		unregistered = append(unregistered, "token.DeleteUserPermissionHandler")
	}

	if o.LoginGetLoginHandler == nil {
		unregistered = append(unregistered, "login.GetLoginHandler")
	}

	if o.LoginGetLoginCallbackHandler == nil {
		unregistered = append(unregistered, "login.GetLoginCallbackHandler")
	}

	if o.LoginGetLoginConfigDetailsHandler == nil {
		unregistered = append(unregistered, "login.GetLoginConfigDetailsHandler")
	}

	if o.LoginGetLoginDetailsHandler == nil {
		unregistered = append(unregistered, "login.GetLoginDetailsHandler")
	}

	if o.LoginGetLoginDetailsByIDHandler == nil {
		unregistered = append(unregistered, "login.GetLoginDetailsByIDHandler")
	}

	if o.LoginGetLoginMockHandler == nil {
		unregistered = append(unregistered, "login.GetLoginMockHandler")
	}

	if o.ResourceGetResourceByIDHandler == nil {
		unregistered = append(unregistered, "resource.GetResourceByIDHandler")
	}

	if o.TokenGetUserPermissionHandler == nil {
		unregistered = append(unregistered, "token.GetUserPermissionHandler")
	}

	if o.TokenTokenValidatPayloadHandler == nil {
		unregistered = append(unregistered, "token.TokenValidatPayloadHandler")
	}

	if o.TokenTokenValidateHandler == nil {
		unregistered = append(unregistered, "token.TokenValidateHandler")
	}

	if o.LoginUpdateLoginConfigDetailsHandler == nil {
		unregistered = append(unregistered, "login.UpdateLoginConfigDetailsHandler")
	}

	if o.LoginUpdateLoginDetailsHandler == nil {
		unregistered = append(unregistered, "login.UpdateLoginDetailsHandler")
	}

	if o.ResourceUpdateResourceHandler == nil {
		unregistered = append(unregistered, "resource.UpdateResourceHandler")
	}

	if o.TokenUpdateUserPermissionHandler == nil {
		unregistered = append(unregistered, "token.UpdateUserPermissionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CidmAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CidmAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "bearer":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *CidmAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *CidmAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *CidmAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CidmAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the cidm API
func (o *CidmAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CidmAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = login.NewAddLoginDetails(o.context, o.LoginAddLoginDetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/resource"] = resource.NewAddResource(o.context, o.ResourceAddResourceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/token/authorization"] = token.NewAddUserPermission(o.context, o.TokenAddUserPermissionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/resource"] = resource.NewDeleteResource(o.context, o.ResourceDeleteResourceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/token/authorization"] = token.NewDeleteUserPermission(o.context, o.TokenDeleteUserPermissionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cidmlogin"] = login.NewGetLogin(o.context, o.LoginGetLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cidmcallback"] = login.NewGetLoginCallback(o.context, o.LoginGetLoginCallbackHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login/config/{id}"] = login.NewGetLoginConfigDetails(o.context, o.LoginGetLoginConfigDetailsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login"] = login.NewGetLoginDetails(o.context, o.LoginGetLoginDetailsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login/{id}"] = login.NewGetLoginDetailsByID(o.context, o.LoginGetLoginDetailsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cidmlogin"] = login.NewGetLoginMock(o.context, o.LoginGetLoginMockHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resource/{id}"] = resource.NewGetResourceByID(o.context, o.ResourceGetResourceByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/token/authorization"] = token.NewGetUserPermission(o.context, o.TokenGetUserPermissionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/token/authentication"] = token.NewTokenValidatPayload(o.context, o.TokenTokenValidatPayloadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/token/authentication"] = token.NewTokenValidate(o.context, o.TokenTokenValidateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/login/config/{id}"] = login.NewUpdateLoginConfigDetails(o.context, o.LoginUpdateLoginConfigDetailsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/login"] = login.NewUpdateLoginDetails(o.context, o.LoginUpdateLoginDetailsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource"] = resource.NewUpdateResource(o.context, o.ResourceUpdateResourceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/token/authorization"] = token.NewUpdateUserPermission(o.context, o.TokenUpdateUserPermissionHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CidmAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *CidmAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
