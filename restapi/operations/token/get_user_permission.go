// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserPermissionHandlerFunc turns a function with the right signature into a get user permission handler
type GetUserPermissionHandlerFunc func(GetUserPermissionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserPermissionHandlerFunc) Handle(params GetUserPermissionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetUserPermissionHandler interface for that can handle valid get user permission params
type GetUserPermissionHandler interface {
	Handle(GetUserPermissionParams, interface{}) middleware.Responder
}

// NewGetUserPermission creates a new http.Handler for the get user permission operation
func NewGetUserPermission(ctx *middleware.Context, handler GetUserPermissionHandler) *GetUserPermission {
	return &GetUserPermission{Context: ctx, Handler: handler}
}

/*GetUserPermission swagger:route GET /token/authorization/ token getUserPermission

Get all Permissions for a particular token .

This API is responsible to get the  Authorization for a particular Token.
This API trys to answer the question What Do i have access to?
First it will validate it is a valid Authenticated Token and
then will get from the repository what are the available actions for the
user and on which resources , this authenticate  {subject, resource,
action}


*/
type GetUserPermission struct {
	Context *middleware.Context
	Handler GetUserPermissionHandler
}

func (o *GetUserPermission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserPermissionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
