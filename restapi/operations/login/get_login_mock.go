// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLoginMockHandlerFunc turns a function with the right signature into a get login mock handler
type GetLoginMockHandlerFunc func(GetLoginMockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoginMockHandlerFunc) Handle(params GetLoginMockParams) middleware.Responder {
	return fn(params)
}

// GetLoginMockHandler interface for that can handle valid get login mock params
type GetLoginMockHandler interface {
	Handle(GetLoginMockParams) middleware.Responder
}

// NewGetLoginMock creates a new http.Handler for the get login mock operation
func NewGetLoginMock(ctx *middleware.Context, handler GetLoginMockHandler) *GetLoginMock {
	return &GetLoginMock{Context: ctx, Handler: handler}
}

/*GetLoginMock swagger:route GET /cidmlogin login getLoginMock

Execute action for  Loging handler in TEST only .

Get Loging handler for test enviroments only, this is controled via
a ENV variable.


*/
type GetLoginMock struct {
	Context *middleware.Context
	Handler GetLoginMockHandler
}

func (o *GetLoginMock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLoginMockParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
