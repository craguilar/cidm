// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLoginDetailsHandlerFunc turns a function with the right signature into a get login details handler
type GetLoginDetailsHandlerFunc func(GetLoginDetailsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoginDetailsHandlerFunc) Handle(params GetLoginDetailsParams) middleware.Responder {
	return fn(params)
}

// GetLoginDetailsHandler interface for that can handle valid get login details params
type GetLoginDetailsHandler interface {
	Handle(GetLoginDetailsParams) middleware.Responder
}

// NewGetLoginDetails creates a new http.Handler for the get login details operation
func NewGetLoginDetails(ctx *middleware.Context, handler GetLoginDetailsHandler) *GetLoginDetails {
	return &GetLoginDetails{Context: ctx, Handler: handler}
}

/*GetLoginDetails swagger:route GET /login login getLoginDetails

Get Default Login details to display login screen.

Get Loging details it returns an object which contains basic info to
initiate the login this is a non secured way this allows the user to get all
the login details available.


*/
type GetLoginDetails struct {
	Context *middleware.Context
	Handler GetLoginDetailsHandler
}

func (o *GetLoginDetails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLoginDetailsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
