// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/craguilar/cidm/models"
)

// GetLoginMockOKCode is the HTTP code returned for type GetLoginMockOK
const GetLoginMockOKCode int = 200

/*GetLoginMockOK Successful operation ok - resource found

swagger:response getLoginMockOK
*/
type GetLoginMockOK struct {
}

// NewGetLoginMockOK creates GetLoginMockOK with default headers values
func NewGetLoginMockOK() *GetLoginMockOK {
	return &GetLoginMockOK{}
}

// WriteResponse to the client
func (o *GetLoginMockOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

// GetLoginMockFoundCode is the HTTP code returned for type GetLoginMockFound
const GetLoginMockFoundCode int = 302

/*GetLoginMockFound Successful operation ok - redirect to OAuth2

swagger:response getLoginMockFound
*/
type GetLoginMockFound struct {
	/*
	  Required: true
	*/
	Location string `json:"Location"`
}

// NewGetLoginMockFound creates GetLoginMockFound with default headers values
func NewGetLoginMockFound() *GetLoginMockFound {
	return &GetLoginMockFound{}
}

// WithLocation adds the location to the get login mock found response
func (o *GetLoginMockFound) WithLocation(location string) *GetLoginMockFound {
	o.Location = location
	return o
}

// SetLocation sets the location to the get login mock found response
func (o *GetLoginMockFound) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *GetLoginMockFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(302)
}

/*GetLoginMockDefault Unexpected error

swagger:response getLoginMockDefault
*/
type GetLoginMockDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLoginMockDefault creates GetLoginMockDefault with default headers values
func NewGetLoginMockDefault(code int) *GetLoginMockDefault {
	if code <= 0 {
		code = 500
	}

	return &GetLoginMockDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get login mock default response
func (o *GetLoginMockDefault) WithStatusCode(code int) *GetLoginMockDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get login mock default response
func (o *GetLoginMockDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get login mock default response
func (o *GetLoginMockDefault) WithPayload(payload *models.Error) *GetLoginMockDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get login mock default response
func (o *GetLoginMockDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoginMockDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
