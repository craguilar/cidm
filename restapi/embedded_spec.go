// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the base API for Identity Manager microservice. Api documentation\navailable in /api/idm/docs\n",
    "title": "Identity Manager",
    "contact": {
      "name": "Carlos Ruiz",
      "email": "caruizag@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:30030",
  "basePath": "/api/idm",
  "paths": {
    "/cidmcallback": {
      "get": {
        "description": "Get Loging screen",
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Get Login return callback used for OAuth2",
        "operationId": "getLoginCallback",
        "responses": {
          "302": {
            "description": "Successful operation ok - redirect to OAuth2",
            "headers": {
              "Authorization": {
                "type": "string"
              },
              "Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cidmlogin": {
      "get": {
        "description": "Get Loging handler for test enviroments only, this is controled via\na ENV variable.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Execute action for  Loging handler in TEST only .",
        "operationId": "getLoginMock",
        "responses": {
          "200": {
            "description": "Successful operation ok - resource found"
          },
          "302": {
            "description": "Successful operation ok - redirect to OAuth2",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Get Loging handler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Execute action for  Loging handler.",
        "operationId": "getLogin",
        "parameters": [
          {
            "description": "Specification of Loging handler needed.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation ok - resource found"
          },
          "302": {
            "description": "Successful operation ok - redirect to OAuth2",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "description": "Get Loging details it returns an object which contains basic info to\ninitiate the login this is a non secured way this allows the user to get all\nthe login details available.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Get Default Login details to display login screen.",
        "operationId": "getLoginDetails",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "404": {
            "description": "Loging not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update login details to an existing login.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Update loging details",
        "operationId": "updateLoginDetails",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The Login mode to create",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Loging not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Add new login handler , you can have multiple logins defined per IDM.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Add loging details.",
        "operationId": "addLoginDetails",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "description": "Login mode to create",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/login/config/{id}": {
      "get": {
        "description": "Get Login persisted configurations.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Get Default Login details to display login screen.",
        "operationId": "getLoginConfigDetails",
        "security": [
          {
            "bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "404": {
            "description": "Loging not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update login details to an existing login.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Update loging configuration details",
        "operationId": "updateLoginConfigDetails",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The Configuration object",
            "name": "Configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Loging not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Config name",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/login/{id}": {
      "get": {
        "description": "Get Loging details it returns an object which contains basic info to\ninitiate the login this is a non secured way this allows the user to get\nall the login details available.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Get Login details by Id to display in login screen.",
        "operationId": "getLoginDetailsById",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "404": {
            "description": "Loging not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Login ID to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/resource/": {
      "put": {
        "description": "Get a particular resource by Id\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Update Resource details by Id",
        "operationId": "updateResource",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "description": "resource",
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Get a particular resource by Id\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Add Resource details by Id",
        "operationId": "addResource",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Get a particular resource by Id\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Delete Resource details by Id",
        "operationId": "deleteResource",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resource/{id}": {
      "get": {
        "description": "Get a particular resource by Id\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "resource"
        ],
        "summary": "Get Resource details by Id",
        "operationId": "getResourceById",
        "security": [
          {
            "bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Login ID to get",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/token/authentication": {
      "get": {
        "description": "Get Loging screen",
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Validate token in header.",
        "operationId": "tokenValidate",
        "parameters": [
          {
            "type": "string",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Validate token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Validate token in header no need for authentication",
        "operationId": "tokenValidatPayload",
        "parameters": [
          {
            "description": "Login mode to create",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valid Token"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/authorization/": {
      "get": {
        "description": "This API is responsible to get the  Authorization for a particular Token.\nThis API trys to answer the question What Do i have access to?\nFirst it will validate it is a valid Authenticated Token and\nthen will get from the repository what are the available actions for the\nuser and on which resources , this authenticate  {subject, resource,\naction}\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Get all Permissions for a particular token .",
        "operationId": "getUserPermission",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/getUserPermissionOKBody"
            }
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update a permission.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Get all Permissions for a particular token .",
        "operationId": "updateUserPermission",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "name": "Permission",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          {
            "type": "string",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Add a permission.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Get all Permissions for a particular token .",
        "operationId": "addUserPermission",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "name": "Permission",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          {
            "type": "string",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a permission.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "summary": "Get all Permissions for a particular token .",
        "operationId": "deleteUserPermission",
        "security": [
          {
            "bearer": []
          }
        ],
        "parameters": [
          {
            "name": "Permission",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          {
            "type": "string",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Configuration": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Login": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "canonicalUrl": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "isDefault": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Permission": {
      "type": "object",
      "required": [
        "email",
        "resource",
        "operation"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "getUserPermissionOKBody": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Permission"
      },
      "x-go-gen-location": "operations"
    }
  },
  "responses": {
    "UnauthorizedError": {
      "description": "Authentication information is missing or invalid",
      "headers": {
        "WWW_Authenticate": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
